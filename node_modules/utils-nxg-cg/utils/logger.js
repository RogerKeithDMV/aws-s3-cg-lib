const util = require('util');
const path = require('path');
//if we need rotate logs, uncomment this line and use this library
//require('winston-daily-rotate-file');
const {createLogger, format: f, transports} = require('winston');
const {align, combine, timestamp, printf, colorize, uncolorize} = f;

const rootPath = 'logs/';

const _config = (filename = '', level = '') => ({
    exitOnError: false,
    handleExceptions: true,
    handleRejections: true,
    level,
    transports: [
        //if we need rotate logs, uncomment this line and comment the line-down
        //new transports.DailyRotateFile(formatDailyRotateFile(filename, level)),
        new transports.File(_format(filename, level)),
        new transports.Console(_format(filename, level, true))
    ]
});

/**
 * if we need rotate logs, uncomment this function,
 * change:
 * info: createLogger(_config('info.log', 'info')),
 * error: createLogger(_config('error.log')),
 * to:
 * info: createLogger(_config('info', 'info')),
 * error: createLogger(_config('error')),
 */
/*const formatDailyRotateFile = (filename = '', level = '') => {
    return {
        level,
        filename : `${filename}-%DATE%.log`,
        datePattern: 'YYYY-MM-DD-HH',
        zippedArchive: false,
        //maxSize: '20m',
        maxFiles: '14d',
        json:false
    }
};*/

const _format = (filename = '', level = '', console = false) => ({
    filename,
    format: combine(
        console ? colorize({all: true}) : uncolorize(),
        align(),
        timestamp({format: 'MMM-DD-YYYY HH:mm:ss'}),
        printf(info => `${info.level}: ${[info.timestamp]}: ${info.message}`)
    ),
    handleExceptions: true,
    handleRejections: true,
    ignoreErrors: false,
    level
});

const loggers = {
    info: createLogger(_config(`${path.join(rootPath, 'info.log')}`, 'info')),
    error: createLogger(_config(`${path.join(rootPath, 'error.log')}`))
};

module.exports = {
    debug: (...msg) => loggers.error.debug(util.format(...msg)),
    error: (...msg) => loggers.error.error(util.format(...msg)),
    info: (...msg) => loggers.info.info(util.format(...msg)),
    warn: (...msg) => loggers.error.warn(util.format(...msg))
};
