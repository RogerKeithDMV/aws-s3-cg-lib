const helpers = require('../../utils/helpers');
const fs = require('fs');
const path = require('path');

describe('suite to test helpers library utils', function () {

    const required = {
        elementDelimiter: '*',
        endOfLine: '\n'
    };
    const optional = {
        format: true,
        segmentTerminator: '~'
    };

    const object = {};
    const json_1 = fs.readFileSync(path.join(__dirname, 'json.json'));
    const json_2 = fs.readFileSync(path.join(__dirname, 'json.json'), 'ascii');
    const json_3 = fs.readFileSync(path.join(__dirname, 'json.json'), 'base64url');
    const json_4 = fs.readFileSync(path.join(__dirname, 'json.json'), 'base64');
    const json_5 = fs.readFileSync(path.join(__dirname, 'json.json'), 'binary');
    const json_6 = fs.readFileSync(path.join(__dirname, 'json.json'), 'latin1');
    const json_7 = fs.readFileSync(path.join(__dirname, 'json.json'), 'hex');
    const json_8 = fs.readFileSync(path.join(__dirname, 'json.json'), 'ucs2');
    const json_9 = fs.readFileSync(path.join(__dirname, 'json.json'), 'ucs-2');
    const json_10 = fs.readFileSync(path.join(__dirname, 'json.json'), 'utf16le');
    const json_11 = fs.readFileSync(path.join(__dirname, 'json.json'), 'utf8');
    const json_12 = fs.readFileSync(path.join(__dirname, 'json.json'), 'utf-8');
    const array_base = fs.readFileSync(path.join(__dirname, 'array.json'), 'base64');

    const array = [
        {
            color: "red",
            value: "#f00"
        },
        {
            color: "green",
            value: "#0f0"
        },
        {
            color: "blue",
            value: "#00f"
        },
        {
            color: "cyan",
            value: "#0ff"
        },
        {
            color: "magenta",
            value: "#f0f"
        },
        {
            color: "yellow",
            value: "#ff0"
        },
        {
            color: "black",
            value: "#000"
        }
    ];

    const object_2 =
        {
            "product": "Live JSON generator",
            "version": 3.1,
            "releaseDate": "2014-06-25T00:00:00.000Z",
            "demo": true,
            "person": {
                "id": 12345,
                "name": "John Doe",
                "phones": {
                    "home": "800-123-4567",
                    "mobile": "877-123-1234"
                },
                "email": [
                    "jd@example.com",
                    "jd@example.org"
                ],
                "dateOfBirth": "1980-01-02T00:00:00.000Z",
                "registered": true
            }
        };

    it('should create directory', function () {
        expect(helpers.helperDirectory('directory1')).toEqual(expect.stringContaining('directory1'));
        expect(helpers.helperDirectory('directory2')).toEqual(expect.stringContaining('directory2'));
        expect(helpers.helperDirectory('directory1', true)).toEqual(expect.stringContaining('directory1'));
        expect(helpers.helperDirectory('directory2', true)).toEqual(expect.stringContaining('directory2'));
    });

    it('should convert parameter valid to a json', function () {
        expect(typeof helpers.convertToObject(json_1)).toBe('object');
        expect(typeof helpers.convertToObject(json_2)).toBe('object');
        expect(typeof helpers.convertToObject(json_3)).toBe('object');
        expect(typeof helpers.convertToObject(json_4)).toBe('object');
        expect(typeof helpers.convertToObject(json_5)).toBe('object');
        expect(typeof helpers.convertToObject(json_6)).toBe('object');
        expect(typeof helpers.convertToObject(json_11)).toBe('object');
        expect(typeof helpers.convertToObject(json_12)).toBe('object');
        expect(()=>helpers.convertToObject(json_7)).toThrow(Error);
        expect(()=>helpers.convertToObject(json_8)).toThrow(Error);
        expect(()=>helpers.convertToObject(json_9)).toThrow(Error);
        expect(()=>helpers.convertToObject(json_10)).toThrow(Error);
    });

    it('should convert data to utf8', function () {
        expect(typeof helpers.convertToUtf8(json_1)).toBe('string');
        expect(typeof helpers.convertToUtf8(json_2)).toBe('string');
        expect(typeof helpers.convertToUtf8(json_3)).toBe('string');
        expect(typeof helpers.convertToUtf8(json_4)).toBe('string');
        expect(typeof helpers.convertToUtf8(json_5)).toBe('string');
        expect(typeof helpers.convertToUtf8(json_6)).toBe('string');
        expect(typeof helpers.convertToUtf8(json_11)).toBe('string');
        expect(typeof helpers.convertToUtf8(json_12)).toBe('string');
        expect(()=>helpers.convertToUtf8(json_7)).toThrow(Error);
        expect(()=>helpers.convertToUtf8(json_8)).toThrow(Error);
        expect(()=>helpers.convertToUtf8(json_9)).toThrow(Error);
        expect(()=>helpers.convertToUtf8(json_10)).toThrow(Error);
    });

    it('should save file another directory and remove file', async function () {
        const data = {
            file: "img.png",
            content: fs.readFileSync(path.join(__dirname, 'img.png'))
        };
        const upload_path = await helpers.saveFile(data);
        expect(upload_path).toEqual(expect.stringContaining('img.png'));
        await expect(helpers.deleteFile(upload_path)).resolves.toBeTruthy();
    });

    it('should valid properties required and optional', async function () {
        let temp = {elementDelimiter: '-', endOfLine: '/'};
        expect(helpers.validProperties(required, temp, {})).toBeTruthy();
        expect(helpers.validProperties(optional, temp, {}, true)).toBeTruthy();
        temp.endOfLine = '';
        //without values in some keys of the object
         expect(()=>helpers.validProperties(required, temp, {})).toThrow(Error);
    });

    it('should valid if param is object', function () {
        expect(helpers.isObject({})).toBeTruthy();
        expect(helpers.isObject("")).toBeFalsy();
        expect(helpers.isObject(object)).toBeTruthy();
        expect(helpers.isObject(object_2)).toBeTruthy();
        expect(helpers.isObject(json_1)).toBeTruthy();
        expect(helpers.isObject(json_2)).toBeTruthy();
        expect(helpers.isObject(json_3)).toBeTruthy();
        expect(helpers.isObject(json_4)).toBeTruthy();
        expect(helpers.isObject(json_5)).toBeTruthy();
        expect(helpers.isObject(json_6)).toBeTruthy();
        expect(helpers.isObject(json_11)).toBeTruthy();
        expect(helpers.isObject(json_12)).toBeTruthy();
        expect(helpers.isObject(array)).toBeTruthy();
        expect(helpers.isObject(array_base)).toBeTruthy();
        //bad encodings
        expect(helpers.isObject(json_7)).toBeFalsy();
        expect(helpers.isObject(json_8)).toBeFalsy();
        expect(helpers.isObject(json_9)).toBeFalsy();
        expect(helpers.isObject(json_10)).toBeFalsy();
    });

    it('should valid if param is object valid', function () {
        expect(helpers.isObjectValid({})).toBeFalsy();
        expect(helpers.isObjectValid({data: true})).toBeTruthy();
        expect(helpers.isObjectValid(object)).toBeFalsy();
        expect(helpers.isObjectValid(object_2)).toBeTruthy();
        expect(helpers.isObjectValid(json_1)).toBeTruthy();
        expect(helpers.isObjectValid(json_2)).toBeTruthy();
        expect(helpers.isObjectValid(json_3)).toBeTruthy();
        expect(helpers.isObjectValid(json_4)).toBeTruthy();
        expect(helpers.isObjectValid(json_5)).toBeTruthy();
        expect(helpers.isObjectValid(json_6)).toBeTruthy();
        expect(helpers.isObjectValid(json_11)).toBeTruthy();
        expect(helpers.isObjectValid(json_12)).toBeTruthy();
        expect(helpers.isObjectValid(array_base)).toBeTruthy();
        //bad encodings
        expect(helpers.isObjectValid(json_7)).toBeFalsy();
        expect(helpers.isObjectValid(json_8)).toBeFalsy();
        expect(helpers.isObjectValid(json_9)).toBeFalsy();
        expect(helpers.isObjectValid(json_10)).toBeFalsy();
    });

    it('should getRandomNum', function () {
        expect(helpers.randomNum()).toHaveLength(8);
    });

    it('should create env time zone and remove it', function () {
        expect(helpers.setTimeZone('US')).toBe(undefined);
        //console.log(process.env);
        expect(helpers.removeCustomTimeZone()).toBe(undefined);
        //console.log(process.env);
    });

    it('should validate hex regex valid and invalid', function () {
        expect(helpers.validateHex(json_7)).toBeTruthy();
        expect(helpers.validateHex(json_8)).toBeFalsy();
    });

    it('should validate xml structure, xml correct format, base 64', function () {
        const data = fs.readFileSync(path.join(__dirname, 'sat.xml'), 'base64');
        const result = helpers.validateXMLStructure(data);
        expect(result).toBeTruthy();
    });

    it('should validate xml structure, xml correct format, base 64url', function () {
        const data = fs.readFileSync(path.join(__dirname, 'sat.xml'), 'base64url');
        const result = helpers.validateXMLStructure(data);
        expect(result).toBeTruthy();
    });

    it('should validate xml structure, xml correct format, raw content', function () {
        const data = fs.readFileSync(path.join(__dirname, 'sat.xml'));
        const result = helpers.validateXMLStructure(data);
        expect(result).toBeTruthy();
    });

    it('should validate xml structure, bad xml format, to be falsy', async function () {
        const data = fs.readFileSync(path.join(__dirname, 'error.xml'));
        const result = helpers.validateXMLStructure(data);
        expect(result).toBeFalsy();
    });

});
