const constants = require('../../utils/constants');
const {helpers} = require('../../index');

const {
    emits, log_levels, Base64Regex, Base64Regexp, ELASTICIO_LISTEN_MESSAGES_ON,
    ERROR_PROPERTY, ERROR_WITH_PROPERTY, FINISH_EXEC, messages_databases, PROCESS_SUCCESS, START_EXEC, START_PROCESS,
    START_TRANS, SUCCESS_TRANS, URI_RABBITMQ
} = constants;


describe('suite to test library constants', function () {

    const lorem = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s"
    const base64 = "TG9yZW0gSXBzdW0gaXMgc2ltcGx5IGR1bW15IHRleHQgb2YgdGhlIHByaW50aW5nIGFuZCB0eXBlc2V0dGluZyBpbmR1c3RyeS4gTG9yZW0gSXBzdW0gaGFzIGJlZW4gdGhlIGluZHVzdHJ5J3Mgc3RhbmRhcmQgZHVtbXkgdGV4dCBldmVyIHNpbmNlIHRoZSAxNTAwcw=="
    const base64_url = "TG9yZW0gSXBzdW0gaXMgc2ltcGx5IGR1bW15IHRleHQgb2YgdGhlIHByaW50aW5nIGFuZCB0eXBlc2V0dGluZyBpbmR1c3RyeS4gTG9yZW0gSXBzdW0gaGFzIGJlZW4gdGhlIGluZHVzdHJ5J3Mgc3RhbmRhcmQgZHVtbXkgdGV4dCBldmVyIHNpbmNlIHRoZSAxNTAwcw"

    test('should constants messages', function () {
        expect(constants.emits).toBe(emits);
        expect(constants.log_levels).toBe(log_levels);
        expect(constants.ELASTICIO_LISTEN_MESSAGES_ON).toBe(ELASTICIO_LISTEN_MESSAGES_ON);
        expect(constants.ERROR_PROPERTY).toBe(ERROR_PROPERTY);
        expect(constants.ERROR_WITH_PROPERTY).toBe(ERROR_WITH_PROPERTY);
        expect(constants.FINISH_EXEC).toBe(FINISH_EXEC);
        expect(constants.messages_databases).toBe(messages_databases);
        expect(constants.PROCESS_SUCCESS).toBe(PROCESS_SUCCESS);
        expect(constants.START_EXEC).toBe(START_EXEC);
        expect(constants.START_PROCESS).toBe(START_PROCESS);
        expect(constants.START_TRANS).toBe(START_TRANS);
        expect(constants.SUCCESS_TRANS).toBe(SUCCESS_TRANS);
        expect(constants.URI_RABBITMQ).toBe(URI_RABBITMQ);
    });

    it('should convert base64 to utf8', function () {
        expect(helpers.convertBase64ToUtf8(base64)).toBe(lorem);
    });

    it('should convert params to utf8', function () {
        expect(helpers.convertToUtf8(Buffer.from(lorem, 'ascii'))).toBe(lorem);
        expect(helpers.convertToUtf8(Buffer.from(lorem, 'binary'))).toBe(lorem);
        expect(helpers.convertToUtf8(Buffer.from(lorem, 'latin1'))).toBe(lorem);
        expect(helpers.convertToUtf8(Buffer.from(lorem, 'utf-8'))).toBe(lorem);
        expect(helpers.convertToUtf8(Buffer.from(lorem, 'utf8'))).toBe(lorem);
    });

    it('should error convert to utf8', function () {
        expect(()=>helpers.convertToUtf8(Buffer.from(lorem, 'hex'))).toThrow(Error);
        expect(()=>helpers.convertToUtf8(Buffer.from(lorem, 'utf16le'))).toThrow(Error);
        expect(()=>helpers.convertToUtf8(Buffer.from(lorem, 'ucs2'))).toThrow(Error);
        expect(()=>helpers.convertToUtf8(Buffer.from(lorem, 'ucs-2'))).toThrow(Error);
    });

});
